error <- c(rnorm(sum(tt<=3), 0, sigma[1]),
rnorm(sum(tt<=6 & tt>3), 0, sigma[2]), rnorm(sum(tt>6), 0, sigma[3]))
xt <- meanf + error
cv.index <- cvtype(n=ndata, cv.kfold=2, cv.random=FALSE)$cv.index
try10 <- emddenoise(xt, cv.index=cv.index, cv.level=2, by.imf=TRUE)
ndata <- 3000
par(mfrow=c(1,1), mar=c(1,1,1,1))
tt2 <- seq(0, 9, length=ndata)
xt2 <- sin(pi * tt2) + sin(2* pi * tt2) + sin(6 * pi * tt2) + 0.5 * tt2
plot(tt2, xt2, xlab="", ylab="", type="l", axes=FALSE); box()
### Extracting the first IMF by sifting process
tryimf <- extractimf(xt2, tt2, check=FALSE)
tryimf
View(tryimf)
View(try)
plot(tt2, tryimf.imf, xlab="", ylab="", type="l", axes=FALSE); box()
plot(tt2, tryimf$imf, xlab="", ylab="", type="l", axes=FALSE); box()
plot(tt2, tryimf$residue, xlab="", ylab="", type="l", axes=FALSE); box()
ndata <- 2048
tt <- seq(0, 9, length=ndata)
xt <- sin(pi * tt) + sin(2* pi * tt) + sin(6 * pi * tt) + 0.5 * tt
set.seed(1)
xt <- xt + rnorm(ndata, 0, sd(xt)/5)
emdbyint <- emd(xt, tt, max.imf = 5, boundary = "wave")
emdbysm <- semd(xt, tt, cv.kfold=4, boundary="wave", smlevels=1, max.imf=5)
par(mfcol=c(6,2), mar=c(2,2,2,1), oma=c(0,0,2,0))
rangext <- range(xt); rangeimf <- rangext - mean(rangext)
plot(tt, xt, xlab="", ylab="", main="signal", ylim=rangext, type="l")
mtext("Decomposition by EMD", side = 3, line = 2, cex=0.85, font=2)
plot(tt, emdbyint$imf[,1], xlab="", ylab="", main="imf 1", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbyint$imf[,2], xlab="", ylab="", main="imf 2", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbyint$imf[,3], xlab="", ylab="", main="imf 3", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbyint$imf[,4], xlab="", ylab="", main="imf 4", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbyint$imf[,5]+emdbyint$residue, xlab="", ylab="", main="remaining signal",
ylim=rangext, type="l")
plot(tt, xt, xlab="", ylab="", main="signal", ylim=rangext, type="l")
mtext("Decomposition by SEMD", side = 3, line = 2, cex=0.85, font=2)
plot(tt, emdbysm$imf[,1], xlab="", ylab="", main="noise", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbysm$imf[,2], xlab="", ylab="", main="imf 1", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbysm$imf[,3], xlab="", ylab="", main="imf 2", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbysm$imf[,4], xlab="", ylab="", main="imf 3", ylim=rangeimf, type="l")
abline(h=0, lty=2)
plot(tt, emdbysm$residue, xlab="", ylab="", main="residue", ylim=rangext, type="l")
plot(tt2, tryimf$imf, xlab="", ylab="", type="l", axes=FALSE); box()
plot(tt2, tryimf$residue, xlab="", ylab="", type="l", axes=FALSE); box()
plot(tt2, tryimf$imf, xlab="", ylab="", type="l", axes=FALSE); box()
plot(tt2, tryimf$residue, xlab="", ylab="", type="l", axes=FALSE)
require(hht)
require(hht)
tt <- seq(1000) * 0.01
sig <- sin(pi * tt)
asig <- HilbertTransform(sig)
plot(tt, sig, xlim = c(0, 12))
plot(tt, asig, xlim = c(0, 12))
require(hht)
tt <- seq(1000) * 0.01
sig <- sin(pi * tt)
asig <- HilbertTransform(sig)
plot(tt, sig, xlim = c(0, 12))
lines(tt, Re(asig), col = "green")
lines(tt, Im(asig), col = "red")
legend("topright", col = c("black", "green", "red"),
lty = c(NA, 1, 1), pch = c(1, NA, NA),
legend = c("Signal", "Real", "Imaginary"))
require(hht)
tt <- seq(1000) * 0.01
sig <- 5*sin(pi * tt)
asig <- HilbertTransform(sig)
plot(tt, sig, xlim = c(0, 12))
lines(tt, Re(asig), col = "green")
lines(tt, Im(asig), col = "red")
legend("topright", col = c("black", "green", "red"),
lty = c(NA, 1, 1), pch = c(1, NA, NA),
legend = c("Signal", "Real", "Imaginary"))
require(hht)
tt <- seq(1000) * 0.01
sig <- 2*sin(pi * tt)
asig <- HilbertTransform(sig)
plot(tt, sig, xlim = c(0, 12))
lines(tt, Re(asig), col = "green")
lines(tt, Im(asig), col = "red")
legend("topright", col = c("black", "green", "red"),
lty = c(NA, 1, 1), pch = c(1, NA, NA),
legend = c("Signal", "Real", "Imaginary"))
data(PortFosterEvent)
#Run EMD
emd.result=Sig2IMF(sig, tt)
#Display IMFs
time.span <- c(5, 10)
imf.list <- 1:3
original.signal <- TRUE
residue <- TRUE
PlotIMFs(emd.result, time.span, imf.list, original.signal, residue)
#Plot spectrogram
sdt <- tt[2] - tt[1]
dfreq <- 0.25
freq.span <- c(0, 25)
hgram <- HHRender(emd.result, sdt, dfreq, freq.span = freq.span, verbose = FALSE)
time.span <- c(4, 10)
freq.span <- c(0, 25)
amp.span <- c(0.000001, 0.00001)
HHGramImage(hgram, time.span = time.span,
freq.span = freq.span, amp.span = amp.span,
pretty = TRUE)
data(PortFosterEvent)
#Run EMD
emd.result <- Sig2IMF(sig, tt, sm = "polynomial")
#Plot the first 4 IMFs of the EEMD of a signal.
time.span <- c(5, 10)
imf.list <- 1:4
original.signal <- TRUE
residue <- TRUE
PlotIMFs(emd.result, time.span, imf.list, original.signal, residue)
#Check how much contribution IMFs 2 and 3 make to the complete signal
imf.list <- c(2, 3)
fit.line <- TRUE
PlotIMFs(emd.result, time.span, imf.list, original.signal, residue, fit.line)
require(hht)
tt <- seq(1000) * 0.01
sig <- sin(4 * pi * tt) + sin(3.4 * pi * tt)
asig <- HilbertTransform(sig)
env <- HilbertEnvelope(asig)
plot(tt, sig, type = "l")
lines(tt, env, col = "red")
lines(tt, -env, col = "red")
data(PortFosterEvent)
emd.result <- Sig2IMF(sig, tt)
dfreq <- 0.1
hspec <- HHSpectrum(emd.result, dfreq)
HHSpecPlot(hspec, show.fourier = TRUE, scale.fourier = TRUE)
#Here we see how the EMD produces a dyadic filter bank for uniform random noise
#The frequency distributions of all but the first IMF display a Chi-Square distribution
#See Huang, N. E. & Wu, Z.
#A review on Hilbert-Huang Transform: Method and its applications to geophysical studies.
#Reviews of Geophysics, 2008, 46, RG2006
#The EMD of this signal may take a couple of minutes to run
set.seed(628)
sig <- runif(10000)
tt <- seq_len(length(sig)) * 0.01
## Not run: emd.result <- Sig2IMF(sig, tt)
dfreq <- 0.1
## Not run: hspec <- HHSpectrum(emd.result, dfreq)
## Not run: HHSpecPlot(hspec, show.imfs = TRUE,
imf.list = 1:10, show.total = TRUE, scaling = "sqrt",
imf.lwd = rep(2, 10), total.lty = 3)
## End(Not run)
#Reviews of Geophysics, 2008, 46, RG2006
#The EMD of this signal may take a couple of minutes to run
set.seed(628)
sig <- runif(10000)
tt <- seq_len(length(sig)) * 0.01
emd.result <- Sig2IMF(sig, tt)
dfreq <- 0.1
hspec <- HHSpectrum(emd.result, dfreq)
HHSpecPlot(hspec, show.imfs = TRUE,
imf.list = 1:10, show.total = TRUE, scaling = "sqrt",
imf.lwd = rep(2, 10), total.lty = 3)
data(PortFosterEvent)
trials <- 10
nimf <- 10
noise.amp <- 6.4e-07
trials.dir <- "test"
set.seed(628)
#Run EEMD (this may take some time)
EEMD(sig, tt, noise.amp, trials, nimf, trials.dir = trials.dir)
#Compile the results
EEMD.result <- EEMDCompile(trials.dir, trials, nimf)
#Calculate spectrogram
dt <- 0.1
dfreq <- 0.1
hgram <- HHRender(EEMD.result, dt, dfreq)
#Plot spectrogram
time.span <- c(4, 10)
freq.span <- c(0, 25)
HHGramImage(hgram, time.span, freq.span,
pretty = TRUE, img.x.format = "%.1f", img.y.format = "%.0f",
main = "Port Foster event - ensemble Hilbert spectrogram")
HHGramImage(hgram, time.span, freq.span, amp.span = c(1, 5),
clustergram = TRUE, pretty = TRUE, img.x.format = "%.1f", colorbar.format = "%.0f",
img.y.format = "%.0f", main = "Port Foster event - signal stability")
#Decluster
#show only areas with stable signal
#i.e. each pixel has data from at least 3 EEMD trials
HHGramImage(hgram, time.span = time.span, freq.span = freq.span,
cluster.span = c(, 10), pretty = TRUE, img.x.format = "%.1f",
img.y.format = "%.0f",
main = "Port Foster event - ensemble Hilbert spectrogram")
#Log amplitude plot
HHGramImage(hgram, time.span = time.span, freq.span = freq.span,
scaling = "log", pretty = TRUE, img.x.format = "%.1f", img.y.format = "%.0f",
main = "Port Foster event - ensemble Hilbert spectrogram with log amplitude")
## End(Not run)
#Log frequency plot
dfreq <- 0.001
hgram=HHRender(EEMD.result, dt, dfreq, scaling = "log")
HHGramImage(hgram, time.span, freq.span = c(0, 2),
pretty = TRUE, img.x.format = "%.1f", img.y.format = "%.2f",
img.y.lab = "log frequency",
main = "Port Foster event - ensemble Hilbert spectrogram with log frequency")
## End(Not run)
#Only show IMF 1
dfreq <- 0.1
hgram=HHRender(EEMD.result, dt, dfreq, combine.imfs = FALSE)
HHGramImage(hgram, time.span, freq.span, imf.list = 1,
pretty = TRUE, img.x.format = "%.1f", img.y.format = "%.0f",
main = "Port Foster event - ensemble Hilbert spectrogram of IMF 1")
## End(Not run)
data(PortFosterEvent)
dt <- mean(diff(tt))
ft <- list()
ft$nfft <- 4096
ft$ns <- 30
ft$nov <- 29
time.span <- c(5, 10)
freq.span <- c(0, 25)
amp.span <- c(1e-5, 0.0003)
FTGramImage(sig, dt, ft, time.span = time.span, freq.span = freq.span,
amp.span = amp.span, pretty = TRUE, img.x.format = "%.1f",
img.y.format = "%.0f",
main = "Port Foster Event - Fourier Spectrogram")
data(PortFosterEvent)
trials=10
nimf=10
noise.amp=6.4e-07
trials.dir="test"
set.seed(628)
#Run EEMD (this may take some time)
EEMD(sig, tt, noise.amp, trials, nimf, noise.amp, trials.dir = trials.dir)
#Compile the results
EEMD.result <- EEMDCompile(trials.dir, trials, nimf)
resift.rule="max.var"
resift.result <- EEMDResift(EEMD.result, resift.rule)
#Plot the IMFs
time.span=c(5, 10)
imf.list=1:3
os=TRUE
res=TRUE
PlotIMFs(resift.result, time.span, imf.list, os, res)
###
data(PortFosterEvent)
trials <- 10
nimf <- 10
noise.amp <- 6.4e-07
trials.dir <- "test"
set.seed(628)
#Run EEMD (this may take some time)
EEMD(sig, tt, noise.amp, trials, nimf, trials.dir = trials.dir)
#Compile the results
EEMD.result <- EEMDCompile(trials.dir, trials, nimf)
#Plot the IMFs
time.span <- c(5, 10)
imf.list <- 1:3
os <- TRUE
res <- TRUE
PlotIMFs(EEMD.result, time.span, imf.list, os, res)
### EEMD
data(PortFosterEvent)
trials <- 10
nimf <- 10
noise.amp <- 6.4e-07
trials.dir <- "test"
set.seed(628)
#Run EEMD (this may take some time)
EEMD(sig, tt, noise.amp, trials, nimf, trials.dir = trials.dir)
#Compile the results
EEMD.result <- EEMDCompile(trials.dir, trials, nimf)
#Plot the IMFs
time.span <- c(5, 10)
imf.list <- 1:3
os <- TRUE
res <- TRUE
## Not run: PlotIMFs(EEMD.result, time.span, imf.list, os, res)
### EEMD
data(PortFosterEvent)
trials <- 10
nimf <- 10
noise.amp <- 6.4e-07
trials.dir <- "test"
set.seed(628)
#Run EEMD (this may take some time)
EEMD(sig, tt, noise.amp, trials, nimf, trials.dir = trials.dir)
#Compile the results
EEMD.result <- EEMDCompile(trials.dir, trials, nimf)
#Plot the IMFs
time.span <- c(5, 10)
imf.list <- 1:3
os <- TRUE
res <- TRUE
## Not run: PlotIMFs(EEMD.result, time.span, imf.list, os, res)
PlotIMFs(EEMD.result, time.span, imf.list, os, res)
### HHSpectrum
### Generates a Hilbert periodogram from the results of Sig2IMF and EEMD.
###
data(PortFosterEvent)
emd.result <- Sig2IMF(sig, tt)
dfreq <- 0.1
hspec <- HHSpectrum(emd.result, dfreq)
HHSpecPlot(hspec, show.fourier = TRUE, scale.fourier = TRUE)
tt <- seq(1000) * 0.01
sig <- 2*sin(pi * tt)
ndata = length(sig)
h = rep(0, ndata)
if(ndata %% 2 == 0)
{
h[c(1, ndata/2+1)] = 1
h[2:(ndata/2)] = 2
}
else
{
h[1] = 1
h[2:((ndata + 1)/2)] = 2
}
if(ndata %% 2 == 0)
{
h[c(1, ndata/2+1)] = 1
h[2:(ndata/2)] = 2
}
else
{
h[1] = 1
h[2:((ndata + 1)/2)] = 2
}
tt <- seq(1000) * 0.01
sig <- 2*sin(pi * tt)
ndata = length(sig)
h = rep(0, ndata)
if(ndata %% 2 == 0)
{
h[c(1, ndata/2+1)] = 1
h[2:(ndata/2)] = 2
}
else
{
h[1] = 1
h[2:((ndata + 1)/2)] = 2
}
ndata %% 2 == 0
c(1, ndata/2+1)
2:(ndata/2)
h
ndata = length(sig) + 1
h = rep(0, ndata)
if(ndata %% 2 == 0)
{
h[c(1, ndata/2+1)] = 1
h[2:(ndata/2)] = 2
}
else
{
h[1] = 1
h[2:((ndata + 1)/2)] = 2
}
ndata %% 2 == 0
h[1] = 1
h[2:((ndata + 1)/2)] = 2
h
ndata = length(sig)
h = rep(0, ndata)
h[c(1, ndata/2+1)] = 1
h[2:(ndata/2)] = 2
h
??invisible
h * fft(sig)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";")
View(fft.data)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE)
View(fft.data)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE)
View(fft.data)
x <- seq(256) * 0.01
tt <- seq(256) * 0.01
tt
tt <- seq(256)
tt
graphics::plot.default(
x = tt,
y = fft.data$V1,
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
fft.data$V1
fft.data
graphics::plot.default(
x = fft.data$V2,
y = fft.data$V1,
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
x <- seq(1, 20, 0.1)
x
x <- seq(1, 256, 1)
y <- sin(x)
plot(x, y)x <- seq(1, 20, 0.1)
plot(x, y)
plot(x, y, type='l')
x <- seq(1, 256, 0.1)
y <- sin(x)
plot(x, y, type='l')
x <- seq(1, 256, 0.1)
x
x <- seq(1, 256) * 0.1
x
y <- sin(x)
plot(x, y, type='l')
y = fft.data$V1
plot(x, y, type='l')
view(y)
View(y)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE
colClasses=c("numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE
colClasses=c("numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE
,colClasses=c("numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE
,colClasses=c("numeric")
)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE
,colClasses=c("integer")
)
xt <- seq(1, 256) * 0.1
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE)
vec1 <- c("1,1", "2,1", "3,1")
as.numeric(vec1)
??as.numeric
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE)
View(fft.data)
xt <- seq(1, 256) * 0.1
graphics::plot.default(
x = xt,
y = fft.data$V1
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
graphics::plot.default(
x = xt
y = fft.data$V1
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
graphics::plot.default(
x = xt,
y = fft.data$V1,
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
vec1 <- c("1,1", "2,1", "3,1")
as.numeric(vec1, ",")
graphics::plot.default(
x = xt,
y = fft.data$V2,
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE)
fft.data <- read.csv("D:/hsa8.csv", as.is = TRUE, sep = ";", header = FALSE)
View(fft.data)
xt <- seq(1, 256)
graphics::plot.default(
x = xt,
y = fft.data$V1,
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
graphics::plot.default(
x = xt,
y = fft.data$V2,
type = "l",
xlab = "Date",
ylab = "Value",
main = "plot.default"
)
fft.r <- fft(fft.data$V1)
sig <- fft.data$V1
fft.r <- fft(sig)
plot(tt, sig, xlim = c(0, 12))
lines(tt, Re(fft.r), col = "green")
lines(tt, Im(fft.r), col = "red")
sig <- fft.data$V1
fft.r <- fft(sig)
plot(xt, sig, xlim = c(0, 12))
lines(xt, Re(fft.r), col = "green")
lines(xt, Im(fft.r), col = "red")
sig <- fft.data$V1
fft.r <- fft(sig)
plot(xt, sig, xlim = c(0, 256))
lines(xt, Re(fft.r), col = "green")
lines(xt, Im(fft.r), col = "red")
